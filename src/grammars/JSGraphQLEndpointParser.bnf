/**
 * Copyright (c) 2015-present, Jim Kynde Meyer
 * All rights reserved.
 * <p>
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{

    parserClass="com.intellij.lang.jsgraphql.endpoint.parser.JSGraphQLEndpointParser"

    psiClassPrefix="JSGraphQLEndpoint"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.lang.jsgraphql.endpoint.psi"
    psiImplPackage="com.intellij.lang.jsgraphql.endpoint.psi.impl"

    extends="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointPsiElement"

    elementTypeHolderClass="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointTokenTypes"
    elementTypePrefix=""
    elementTypeClass="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointTokenType"
    tokenTypeClass="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointTokenType"

    tokens=[

        TYPE='type'
        INTERFACE='interface'
        IMPLEMENTS='implements'
        INPUT='input'
        ENUM='enum'
        UNION='union'
        SCALAR='scalar'
        ANNOTATION_DEF='annotation'
        SCHEMA='schema'
        QUERY='query'
        MUTATION='mutation'
        SUBSCRIPTION='subscription'
        IMPORT='import'
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACKET='['
        RBRACKET=']'
        COMMA=','
        COLON=':'
        EQUALS='='
        PIPE='|'
        TRUE='true'
        FALSE='false'
        REQUIRED='!'
        AT_ANNOTATION='regexp:@([_A-Za-z][_0-9A-Za-z]*)?'
        LINE_COMMENT="regexp:#.*"

        identifier='regexp:[_A-Za-z][_0-9A-Za-z]*'
        number='regexp:-?[0-9]+(\.[0-9+])?'
    ]
}

Document ::= Definition*

private Definition ::=
    ObjectTypeDefinition
    | InterfaceTypeDefinition
    | InputObjectTypeDefinition
    | EnumTypeDefinition
    | UnionTypeDefinition
    | ScalarTypeDefinition
    | ImportDeclaration
    | SchemaDefinition
    | AnnotationDefinition
    {recoverWhile=RecoverDefinition}

private DefinitionKeyword ::= TYPE | INTERFACE | INPUT | ENUM | UNION | SCALAR | ANNOTATION_DEF | IMPORT | SCHEMA

private RecoverDefinition ::= !(DefinitionKeyword | AT_ANNOTATION)

ObjectTypeDefinition ::= Annotations? TYPE NamedTypeDef ImplementsInterfaces? FieldDefinitionSet {pin=2 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

ImplementsInterfaces ::= IMPLEMENTS NamedType CommaNamedType*  {pin=1}

private CommaNamedType ::= COMMA NamedType {pin=1 recoverWhile=RecoverCommaNamedType}

private RecoverCommaNamedType ::= !(LBRACE | COMMA | DefinitionKeyword | identifier)

FieldDefinitionSet ::= LBRACE FieldDefinition* RBRACE {pin=1}

FieldDefinition ::= Annotations? Property ArgumentsDefinition? COLON CompositeType {pin=2 recoverWhile=RecoverFieldDefinition}

private RecoverFieldDefinition ::= !(RBRACE | AT_ANNOTATION | identifier)

ArgumentsDefinition ::= LPAREN InputValueDefinitions RPAREN {pin=1 recoverWhile=RecoverArgumentsDefinition}

private RecoverArgumentsDefinition ::= !(COLON | RBRACE | AT_ANNOTATION | DefinitionKeyword | identifier)

InputValueDefinitions ::= InputValueDefinition (COMMA InputValueDefinition)*

InputValueDefinition ::= InputValueDefinitionIdentifier COLON CompositeType {pin=1}

InputValueDefinitionIdentifier ::= identifier {mixin="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointInputValueDefinitionIdentifierPsiElement" implements="com.intellij.psi.PsiNameIdentifierOwner"}

private Annotations ::= Annotation*

Annotation ::= AT_ANNOTATION AnnotationArguments? {pin=1 recoverWhile=RecoverAnnotation}

private RecoverAnnotation ::= !(RBRACE | AT_ANNOTATION | DefinitionKeyword | identifier )

AnnotationArgumentValue ::= TRUE | FALSE | number | QuotedString | AnnotationArgumentListValue | AnnotationArgumentObjectValue

AnnotationArgumentListValue ::= LBRACKET (AnnotationArgumentValue (COMMA AnnotationArgumentValue)*)? RBRACKET {
  pin=1 extends=AnnotationArgumentValue methods=[values="AnnotationArgumentValue"]
}

AnnotationArgumentObjectField ::= identifier (EQUALS | COLON) AnnotationArgumentValue {methods=[nameIdentifier="identifier"]}

AnnotationArgumentObjectValue ::= LBRACE (AnnotationArgumentObjectField (COMMA AnnotationArgumentObjectField)*)? RBRACE {
   pin=1 extends=AnnotationArgumentValue methods=[fields="AnnotationArgumentObjectField"]
}

AnnotationArguments ::= LPAREN (AnnotationArgumentValue | NamedAnnotationArguments) RPAREN {pin=1}

NamedAnnotationArguments ::= NamedAnnotationArgument CommaNamedAnnotationArgument*

private CommaNamedAnnotationArgument ::= COMMA NamedAnnotationArgument {pin=1 recoverWhile=RecoverNamedAnnotationArgument}

NamedAnnotationArgument ::= identifier (EQUALS | COLON) AnnotationArgumentValue {pin=1 recoverWhile=RecoverNamedAnnotationArgument}

private RecoverNamedAnnotationArgument ::= !(COMMA | RPAREN)

NamedType ::= identifier {mixin="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypePsiElement" implements="com.intellij.psi.PsiNameIdentifierOwner"}

NamedTypeDef ::= identifier {mixin="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefPsiElement" implements="com.intellij.psi.PsiNameIdentifierOwner"}

CompositeType ::= ListType | (NamedType REQUIRED?)

ListType ::= LBRACKET NamedType RBRACKET REQUIRED? {pin=1}

Property ::= identifier {mixin="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointPropertyPsiElement" implements="com.intellij.psi.PsiNameIdentifierOwner"}

InterfaceTypeDefinition ::= Annotations? INTERFACE NamedTypeDef FieldDefinitionSet {pin=2 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

InputObjectTypeDefinition ::= Annotations? INPUT NamedTypeDef FieldDefinitionSet {pin=2 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

EnumTypeDefinition ::= Annotations? ENUM NamedTypeDef EnumValueDefinitionSet {pin=2 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

EnumValueDefinitionSet ::= LBRACE EnumValueDefinition CommaEnumValueDefinition* RBRACE {pin=1}

private CommaEnumValueDefinition ::= COMMA EnumValueDefinition {pin=1 recoverWhile=RecoverCommaEnumValueDefinition}

private RecoverCommaEnumValueDefinition ::= !(RBRACE | COMMA | DefinitionKeyword | identifier)

EnumValueDefinition ::= identifier

UnionTypeDefinition ::= Annotations? UNION NamedTypeDef EQUALS UnionMemberSet {pin=2 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

UnionMemberSet ::= UnionMember PipeUnionMember*

private PipeUnionMember ::= PIPE UnionMember {pin=1}

UnionMember ::= identifier

ScalarTypeDefinition ::= Annotations? SCALAR NamedTypeDef {pin=2 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

AnnotationDefinition ::= ANNOTATION_DEF NamedTypeDef ArgumentsDefinition? {pin=1 implements="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointNamedTypeDefinition"}

ImportDeclaration ::= IMPORT ImportFileReference {pin=1}

ImportFileReference ::= QuotedString {implements="com.intellij.psi.PsiNameIdentifierOwner" mixin="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointImportFileReferencePsiElement"}

SchemaDefinition ::= SCHEMA OperationTypeDefinitionSet {pin=1}

OperationTypeDefinitionSet ::= LBRACE OperationTypeDefinition* RBRACE {pin=1}

OperationTypeDefinition ::= (QUERY | MUTATION | SUBSCRIPTION) COLON NamedType {pin=1 recoverWhile=RecoverOperation}

private RecoverOperation ::= !(RBRACE | QUERY | MUTATION | SUBSCRIPTION)

QuotedString ::= OPEN_QUOTE String? CLOSING_QUOTE {pin=1}

String ::= STRING_BODY {implements="com.intellij.psi.PsiElement,com.intellij.psi.PsiLiteralValue" mixin="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointStringLiteralPsiElement"}