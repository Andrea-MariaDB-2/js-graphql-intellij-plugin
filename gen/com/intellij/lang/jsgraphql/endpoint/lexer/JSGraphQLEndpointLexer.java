/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

/*
 *  Copyright (c) 2015-present, Jim Kynde Meyer
 *  All rights reserved.
 *
 *  This source code is licensed under the MIT license found in the
 *  LICENSE file in the root directory of this source tree.
 */
package com.intellij.lang.jsgraphql.endpoint.lexer;

import java.util.Stack;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;

import static com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointTokenTypes.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a>
 * from the specification file <tt>src/grammars/JSGraphQLEndpointLexer.flex</tt>
 */

public class JSGraphQLEndpointLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\11\1\12\1\1\22\0\1\2\1\44\1\50\1\10\4\0\1\32\1\33\2\0\1\40"+
    "\1\6\1\7\1\0\12\4\1\41\2\0\1\42\2\0\1\5\32\3\1\36\1\0\1\37\1\0\1\3\1\0\1\24"+
    "\1\47\1\25\1\3\1\16\1\23\1\3\1\45\1\17\2\3\1\27\1\26\1\20\1\31\1\15\1\46\1"+
    "\22\1\30\1\13\1\21\3\3\1\14\1\3\1\34\1\43\1\35\7\0\1\11\242\0\2\11\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\10\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\0\1\5\14\3\1\4\16\3\1\26\1\27"+
    "\1\30\15\3\1\31\2\3\1\32\1\33\5\3\1\34"+
    "\2\3\1\35\3\3\1\36\1\37\10\3\1\40\1\3"+
    "\1\41\3\3\1\42\1\43\2\3\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\122\0\122\0\122\0\122\0\122\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\u02b9\0\122\0\u02e2\0\122"+
    "\0\122\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401"+
    "\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u030b"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\244\0\244"+
    "\0\244\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d"+
    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\244\0\u099c"+
    "\0\u09c5\0\244\0\244\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\244\0\u0abb\0\u0ae4\0\244\0\u0b0d\0\u0b36\0\u0b5f\0\244"+
    "\0\244\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e"+
    "\0\u0ca7\0\244\0\u0cd0\0\244\0\u0cf9\0\u0d22\0\u0d4b\0\244"+
    "\0\244\0\u0d74\0\u0d9d\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\3\1\4\1\12\2\5\1\13\1\14\1\5\1\15"+
    "\1\5\1\16\1\17\1\5\1\20\1\5\1\21\1\5"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\5\1\35\1\5\1\36\1\37"+
    "\1\40\46\37\1\41\52\0\2\4\7\0\1\4\41\0"+
    "\2\5\6\0\17\5\13\0\3\5\5\0\1\6\2\0"+
    "\1\42\44\0\1\43\7\0\17\43\13\0\3\43\5\0"+
    "\1\6\44\0\1\11\1\0\7\11\2\0\36\11\3\0"+
    "\2\5\6\0\1\5\1\44\5\5\1\45\7\5\13\0"+
    "\3\5\4\0\2\5\6\0\5\5\1\46\11\5\13\0"+
    "\3\5\4\0\2\5\6\0\5\5\1\47\5\5\1\50"+
    "\3\5\13\0\3\5\4\0\2\5\6\0\5\5\1\51"+
    "\11\5\13\0\3\5\4\0\2\5\6\0\11\5\1\52"+
    "\5\5\13\0\3\5\4\0\2\5\6\0\5\5\1\53"+
    "\11\5\13\0\3\5\4\0\2\5\6\0\6\5\1\54"+
    "\10\5\13\0\3\5\4\0\2\5\6\0\6\5\1\55"+
    "\3\5\1\56\4\5\13\0\3\5\4\0\2\5\6\0"+
    "\6\5\1\57\10\5\13\0\3\5\1\0\1\37\1\0"+
    "\46\37\5\0\1\60\47\0\2\43\6\0\17\43\13\0"+
    "\3\43\4\0\2\5\6\0\2\5\1\61\14\5\13\0"+
    "\3\5\4\0\2\5\6\0\6\5\1\62\10\5\13\0"+
    "\3\5\4\0\2\5\6\0\6\5\1\63\10\5\13\0"+
    "\3\5\4\0\2\5\6\0\1\64\1\5\1\65\14\5"+
    "\13\0\3\5\4\0\2\5\6\0\2\5\1\66\14\5"+
    "\13\0\3\5\4\0\2\5\6\0\4\5\1\67\12\5"+
    "\13\0\3\5\4\0\2\5\6\0\14\5\1\70\2\5"+
    "\13\0\3\5\4\0\2\5\6\0\5\5\1\71\11\5"+
    "\13\0\3\5\4\0\2\5\6\0\1\72\16\5\13\0"+
    "\3\5\4\0\2\5\6\0\17\5\13\0\2\5\1\73"+
    "\4\0\2\5\6\0\11\5\1\74\5\5\13\0\1\75"+
    "\2\5\4\0\2\5\6\0\3\5\1\76\13\5\13\0"+
    "\3\5\4\0\2\5\6\0\3\5\1\77\13\5\13\0"+
    "\3\5\4\0\2\5\6\0\3\5\1\100\13\5\13\0"+
    "\3\5\4\0\2\5\6\0\13\5\1\101\3\5\13\0"+
    "\3\5\4\0\2\5\6\0\3\5\1\102\13\5\13\0"+
    "\3\5\4\0\2\5\6\0\6\5\1\103\10\5\13\0"+
    "\3\5\4\0\2\5\6\0\14\5\1\104\1\5\1\105"+
    "\13\0\3\5\4\0\2\5\6\0\16\5\1\106\13\0"+
    "\3\5\4\0\2\5\6\0\15\5\1\107\1\5\13\0"+
    "\3\5\4\0\2\5\6\0\16\5\1\110\13\0\3\5"+
    "\4\0\2\5\6\0\11\5\1\111\5\5\13\0\3\5"+
    "\4\0\2\5\6\0\15\5\1\112\1\5\13\0\3\5"+
    "\4\0\2\5\6\0\14\5\1\113\2\5\13\0\3\5"+
    "\4\0\2\5\6\0\3\5\1\114\13\5\13\0\3\5"+
    "\4\0\2\5\6\0\7\5\1\115\7\5\13\0\3\5"+
    "\4\0\2\5\6\0\7\5\1\116\7\5\13\0\3\5"+
    "\4\0\2\5\6\0\1\117\16\5\13\0\3\5\4\0"+
    "\2\5\6\0\3\5\1\120\13\5\13\0\3\5\4\0"+
    "\2\5\6\0\7\5\1\121\7\5\13\0\3\5\4\0"+
    "\2\5\6\0\5\5\1\122\11\5\13\0\3\5\4\0"+
    "\2\5\6\0\3\5\1\123\13\5\13\0\3\5\4\0"+
    "\2\5\6\0\1\124\16\5\13\0\3\5\4\0\2\5"+
    "\6\0\1\125\16\5\13\0\3\5\4\0\2\5\6\0"+
    "\12\5\1\126\4\5\13\0\3\5\4\0\2\5\6\0"+
    "\11\5\1\127\5\5\13\0\3\5\4\0\2\5\6\0"+
    "\13\5\1\130\3\5\13\0\3\5\4\0\2\5\6\0"+
    "\1\5\1\131\15\5\13\0\3\5\4\0\2\5\6\0"+
    "\10\5\1\132\6\5\13\0\3\5\4\0\2\5\6\0"+
    "\13\5\1\133\3\5\13\0\3\5\4\0\2\5\6\0"+
    "\1\134\16\5\13\0\3\5\4\0\2\5\6\0\11\5"+
    "\1\135\5\5\13\0\3\5\4\0\2\5\6\0\4\5"+
    "\1\136\12\5\13\0\3\5\4\0\2\5\6\0\7\5"+
    "\1\137\7\5\13\0\3\5\4\0\2\5\6\0\7\5"+
    "\1\140\7\5\13\0\3\5\4\0\2\5\6\0\11\5"+
    "\1\141\5\5\13\0\3\5\4\0\2\5\6\0\11\5"+
    "\1\142\5\5\13\0\3\5\4\0\2\5\6\0\3\5"+
    "\1\143\13\5\13\0\3\5\4\0\2\5\6\0\1\144"+
    "\16\5\13\0\3\5\4\0\2\5\6\0\16\5\1\145"+
    "\13\0\3\5\4\0\2\5\6\0\4\5\1\146\12\5"+
    "\13\0\3\5\4\0\2\5\6\0\12\5\1\147\4\5"+
    "\13\0\3\5\4\0\2\5\6\0\5\5\1\150\11\5"+
    "\13\0\3\5\4\0\2\5\6\0\4\5\1\151\12\5"+
    "\13\0\3\5\4\0\2\5\6\0\5\5\1\152\11\5"+
    "\13\0\3\5\4\0\2\5\6\0\2\5\1\153\14\5"+
    "\13\0\3\5\4\0\2\5\6\0\3\5\1\154\13\5"+
    "\13\0\3\5\4\0\2\5\6\0\1\155\16\5\13\0"+
    "\3\5\4\0\2\5\6\0\16\5\1\156\13\0\3\5"+
    "\4\0\2\5\6\0\1\157\16\5\13\0\3\5\4\0"+
    "\2\5\6\0\15\5\1\160\1\5\13\0\3\5\4\0"+
    "\2\5\6\0\5\5\1\161\11\5\13\0\3\5\4\0"+
    "\2\5\6\0\4\5\1\162\12\5\13\0\3\5\4\0"+
    "\2\5\6\0\16\5\1\163\13\0\3\5\4\0\2\5"+
    "\6\0\5\5\1\164\11\5\13\0\3\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3526];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\16\1\13\11\1\1\1\11\1\1\2\11"+
    "\1\0\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    protected final Stack<Integer> myStateStack = new Stack<>();

    private void pushState(int state) {
        myStateStack.push(yystate());
        yybegin(state);
    }

    private void popState() {
        yybegin(myStateStack.pop());
    }

    private IElementType keywordOrIdentifier(IElementType keyword) {
        if(JSGraphQLEndpointLexerUtil.isKeywordAtPos(zzBuffer, zzMarkedPos)) {
            return keyword;
        }
        return IDENTIFIER;
    }


    public JSGraphQLEndpointLexer() {
        this((java.io.Reader)null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSGraphQLEndpointLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 37: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 38: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 39: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 40: break;
          case 5: 
            { return AT_ANNOTATION;
            } 
            // fall through
          case 41: break;
          case 6: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 42: break;
          case 7: 
            { return LPAREN;
            } 
            // fall through
          case 43: break;
          case 8: 
            { return RPAREN;
            } 
            // fall through
          case 44: break;
          case 9: 
            { return LBRACE;
            } 
            // fall through
          case 45: break;
          case 10: 
            { return RBRACE;
            } 
            // fall through
          case 46: break;
          case 11: 
            { return LBRACKET;
            } 
            // fall through
          case 47: break;
          case 12: 
            { return RBRACKET;
            } 
            // fall through
          case 48: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 49: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 50: break;
          case 15: 
            { return EQUALS;
            } 
            // fall through
          case 51: break;
          case 16: 
            { return PIPE;
            } 
            // fall through
          case 52: break;
          case 17: 
            { return REQUIRED;
            } 
            // fall through
          case 53: break;
          case 18: 
            { pushState(STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 54: break;
          case 19: 
            { return STRING_BODY;
            } 
            // fall through
          case 55: break;
          case 20: 
            { popState(); return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 21: 
            { popState(); return CLOSING_QUOTE;
            } 
            // fall through
          case 57: break;
          case 22: 
            { return keywordOrIdentifier(TYPE);
            } 
            // fall through
          case 58: break;
          case 23: 
            { return TRUE;
            } 
            // fall through
          case 59: break;
          case 24: 
            { return ENUM;
            } 
            // fall through
          case 60: break;
          case 25: 
            { return keywordOrIdentifier(INPUT);
            } 
            // fall through
          case 61: break;
          case 26: 
            { return UNION;
            } 
            // fall through
          case 62: break;
          case 27: 
            { return FALSE;
            } 
            // fall through
          case 63: break;
          case 28: 
            { return QUERY;
            } 
            // fall through
          case 64: break;
          case 29: 
            { return IMPORT;
            } 
            // fall through
          case 65: break;
          case 30: 
            { return SCALAR;
            } 
            // fall through
          case 66: break;
          case 31: 
            { return SCHEMA;
            } 
            // fall through
          case 67: break;
          case 32: 
            { return MUTATION;
            } 
            // fall through
          case 68: break;
          case 33: 
            { return INTERFACE;
            } 
            // fall through
          case 69: break;
          case 34: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 70: break;
          case 35: 
            { return ANNOTATION_DEF;
            } 
            // fall through
          case 71: break;
          case 36: 
            { return SUBSCRIPTION;
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
