/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

/**
 * Copyright (c) 2018-present, Jim Kynde Meyer
 * All rights reserved.
 * <p>
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
package com.intellij.lang.jsgraphql;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.lang.jsgraphql.psi.GraphQLElementTypes.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a>
 * from the specification file <tt>src/grammars/GraphQLLexer.flex</tt>
 */

public class GraphQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTED_STRING = 2;
  public static final int BLOCK_STRING = 4;
  public static final int VARIABLE_OR_TEMPLATE = 6;
  public static final int TEMPLATE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1824 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\14\100\1\300\u0100\100");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\172\3\1\5\4\3");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\3\2\5\1\3\22\0\1\2\1\17\1\16\1\4\1\10\1\0\1\32\1\0\1\20\1\21\1"+
    "\0\1\14\1\1\1\11\1\12\1\0\12\7\1\22\2\0\1\23\2\0\1\24\4\6\1\13\25\6\1\25\1"+
    "\15\1\26\1\0\1\6\1\0\1\42\1\47\1\50\1\57\1\35\1\52\1\53\1\54\1\43\2\6\1\55"+
    "\1\40\1\45\1\44\1\51\1\33\1\36\1\46\1\41\1\34\1\60\1\6\1\56\1\37\1\6\1\27"+
    "\1\30\1\31\7\0\1\5\242\0\2\5\125\0\1\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\13\4\1\24\2\25"+
    "\1\26\3\24\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\5\2\0\11\4\1\35\4\4\1\0\1\24"+
    "\1\0\1\36\2\0\1\37\1\40\17\4\1\0\1\41"+
    "\1\5\1\0\2\4\1\42\3\4\1\43\10\4\1\44"+
    "\1\45\5\4\1\46\5\4\1\47\5\4\1\50\1\51"+
    "\12\4\1\52\3\4\1\53\3\4\1\54\1\4\1\55"+
    "\1\56\1\57\2\4\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u01b9\0\u021b\0\u024c\0\365"+
    "\0\365\0\365\0\365\0\365\0\365\0\365\0\365\0\365"+
    "\0\365\0\365\0\365\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341"+
    "\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\365"+
    "\0\u04c9\0\365\0\u04fa\0\u052b\0\u055c\0\u058d\0\365\0\u05be"+
    "\0\365\0\365\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u0188\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u04c9\0\365\0\u0961"+
    "\0\365\0\u0992\0\u09c3\0\365\0\365\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\365\0\u0d04\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0188\0\u0d97\0\u0dc8\0\u0df9\0\u0188\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0188"+
    "\0\u0188\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u0188\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u0188\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u0188\0\u0188\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u0188\0\u147b"+
    "\0\u14ac\0\u14dd\0\u0188\0\u150e\0\u153f\0\u1570\0\u0188\0\u15a1"+
    "\0\u0188\0\u0188\0\u0188\0\u15d2\0\u1603\0\u0188";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\12\2\6\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\12\1\40\1\41"+
    "\1\12\1\42\1\43\1\12\1\44\3\12\1\45\4\12"+
    "\1\46\1\12\3\47\1\50\11\47\1\51\1\52\42\47"+
    "\2\53\2\10\11\53\1\54\1\55\42\53\6\50\1\56"+
    "\4\50\1\56\13\50\1\57\3\50\26\56\27\60\1\61"+
    "\1\60\1\62\27\60\63\0\2\10\55\0\3\11\1\0"+
    "\1\11\1\0\53\11\6\0\2\12\3\0\1\12\17\0"+
    "\26\12\7\0\1\13\2\0\1\63\54\0\1\64\4\0"+
    "\1\64\17\0\26\64\7\0\1\65\2\0\1\66\64\0"+
    "\1\67\50\0\2\12\3\0\1\12\17\0\1\12\1\70"+
    "\24\12\6\0\2\12\3\0\1\12\17\0\12\12\1\71"+
    "\13\12\6\0\2\12\3\0\1\12\17\0\12\12\1\72"+
    "\10\12\1\73\2\12\6\0\2\12\3\0\1\12\17\0"+
    "\2\12\1\74\23\12\6\0\2\12\3\0\1\12\17\0"+
    "\1\12\1\75\24\12\6\0\2\12\3\0\1\12\17\0"+
    "\4\12\1\76\21\12\6\0\2\12\3\0\1\12\17\0"+
    "\5\12\1\77\4\12\1\100\13\12\6\0\2\12\3\0"+
    "\1\12\17\0\12\12\1\101\13\12\6\0\2\12\3\0"+
    "\1\12\17\0\1\12\1\102\13\12\1\103\10\12\6\0"+
    "\2\12\3\0\1\12\17\0\3\12\1\104\22\12\6\0"+
    "\2\12\3\0\1\12\17\0\10\12\1\105\15\12\3\47"+
    "\1\0\11\47\1\106\1\0\45\47\1\0\55\47\2\53"+
    "\2\0\11\53\2\0\42\53\2\107\2\0\11\107\1\0"+
    "\1\110\42\107\16\111\1\112\42\111\6\0\2\56\3\0"+
    "\1\56\17\0\26\56\27\60\1\0\1\60\1\0\27\60"+
    "\7\0\1\65\57\0\2\64\3\0\1\64\17\0\26\64"+
    "\7\0\1\65\3\0\1\113\21\0\1\113\35\0\1\114"+
    "\64\0\1\115\50\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\116\23\12\6\0\2\12\3\0\1\12\17\0\10\12"+
    "\1\117\15\12\6\0\2\12\3\0\1\12\17\0\1\12"+
    "\1\120\24\12\6\0\2\12\3\0\1\12\17\0\6\12"+
    "\1\121\17\12\6\0\2\12\3\0\1\12\17\0\16\12"+
    "\1\122\7\12\6\0\2\12\3\0\1\12\17\0\6\12"+
    "\1\123\17\12\6\0\2\12\3\0\1\12\17\0\16\12"+
    "\1\124\7\12\6\0\2\12\3\0\1\12\17\0\16\12"+
    "\1\125\7\12\6\0\2\12\3\0\1\12\17\0\6\12"+
    "\1\126\7\12\1\127\7\12\6\0\2\12\3\0\1\12"+
    "\17\0\14\12\1\130\11\12\6\0\2\12\3\0\1\12"+
    "\17\0\7\12\1\131\11\12\1\132\4\12\6\0\2\12"+
    "\3\0\1\12\17\0\7\12\1\133\16\12\6\0\2\12"+
    "\3\0\1\12\17\0\3\12\1\134\22\12\16\0\1\135"+
    "\42\0\16\111\1\136\42\111\7\0\1\137\1\0\1\140"+
    "\2\0\1\140\52\0\2\12\3\0\1\12\17\0\3\12"+
    "\1\141\22\12\6\0\2\12\3\0\1\12\17\0\11\12"+
    "\1\142\14\12\6\0\2\12\3\0\1\12\17\0\5\12"+
    "\1\143\20\12\6\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\144\23\12\6\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\145\23\12\6\0\2\12\3\0\1\12\17\0\7\12"+
    "\1\146\16\12\6\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\147\23\12\6\0\2\12\3\0\1\12\17\0\22\12"+
    "\1\150\3\12\6\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\151\23\12\6\0\2\12\3\0\1\12\17\0\1\12"+
    "\1\152\24\12\6\0\2\12\3\0\1\12\17\0\13\12"+
    "\1\153\12\12\6\0\2\12\3\0\1\12\17\0\22\12"+
    "\1\154\3\12\6\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\155\23\12\6\0\2\12\3\0\1\12\17\0\20\12"+
    "\1\156\5\12\6\0\2\12\3\0\1\12\17\0\2\12"+
    "\1\157\23\12\16\0\1\107\51\0\1\137\57\0\2\12"+
    "\3\0\1\12\17\0\4\12\1\160\21\12\6\0\2\12"+
    "\3\0\1\12\17\0\12\12\1\161\13\12\6\0\2\12"+
    "\3\0\1\12\17\0\12\12\1\162\13\12\6\0\2\12"+
    "\3\0\1\12\17\0\7\12\1\163\16\12\6\0\2\12"+
    "\3\0\1\12\17\0\6\12\1\164\17\12\6\0\2\12"+
    "\3\0\1\12\17\0\2\12\1\165\23\12\6\0\2\12"+
    "\3\0\1\12\17\0\3\12\1\166\22\12\6\0\2\12"+
    "\3\0\1\12\17\0\6\12\1\167\17\12\6\0\2\12"+
    "\3\0\1\12\17\0\15\12\1\170\10\12\6\0\2\12"+
    "\3\0\1\12\17\0\7\12\1\171\16\12\6\0\2\12"+
    "\3\0\1\12\17\0\5\12\1\172\20\12\6\0\2\12"+
    "\3\0\1\12\17\0\5\12\1\173\20\12\6\0\2\12"+
    "\3\0\1\12\17\0\15\12\1\174\10\12\6\0\2\12"+
    "\3\0\1\12\17\0\24\12\1\175\1\12\6\0\2\12"+
    "\3\0\1\12\17\0\6\12\1\176\17\12\6\0\2\12"+
    "\3\0\1\12\17\0\10\12\1\177\15\12\6\0\2\12"+
    "\3\0\1\12\17\0\5\12\1\200\20\12\6\0\2\12"+
    "\3\0\1\12\17\0\17\12\1\201\6\12\6\0\2\12"+
    "\3\0\1\12\17\0\3\12\1\202\22\12\6\0\2\12"+
    "\3\0\1\12\17\0\3\12\1\203\22\12\6\0\2\12"+
    "\3\0\1\12\17\0\7\12\1\204\16\12\6\0\2\12"+
    "\3\0\1\12\17\0\2\12\1\205\23\12\6\0\2\12"+
    "\3\0\1\12\17\0\6\12\1\206\17\12\6\0\2\12"+
    "\3\0\1\12\17\0\7\12\1\207\16\12\6\0\2\12"+
    "\3\0\1\12\17\0\11\12\1\210\14\12\6\0\2\12"+
    "\3\0\1\12\17\0\2\12\1\211\23\12\6\0\2\12"+
    "\3\0\1\12\17\0\7\12\1\212\16\12\6\0\2\12"+
    "\3\0\1\12\17\0\10\12\1\213\15\12\6\0\2\12"+
    "\3\0\1\12\17\0\12\12\1\214\13\12\6\0\2\12"+
    "\3\0\1\12\17\0\10\12\1\215\15\12\6\0\2\12"+
    "\3\0\1\12\17\0\14\12\1\216\11\12\6\0\2\12"+
    "\3\0\1\12\17\0\12\12\1\217\13\12\6\0\2\12"+
    "\3\0\1\12\17\0\12\12\1\220\13\12\6\0\2\12"+
    "\3\0\1\12\17\0\15\12\1\221\10\12\6\0\2\12"+
    "\3\0\1\12\17\0\16\12\1\222\7\12\6\0\2\12"+
    "\3\0\1\12\17\0\6\12\1\223\17\12\6\0\2\12"+
    "\3\0\1\12\17\0\25\12\1\224\6\0\2\12\3\0"+
    "\1\12\17\0\22\12\1\225\3\12\6\0\2\12\3\0"+
    "\1\12\17\0\6\12\1\226\17\12\6\0\2\12\3\0"+
    "\1\12\17\0\2\12\1\227\23\12\6\0\2\12\3\0"+
    "\1\12\17\0\6\12\1\230\17\12\6\0\2\12\3\0"+
    "\1\12\17\0\2\12\1\231\23\12\6\0\2\12\3\0"+
    "\1\12\17\0\2\12\1\232\23\12\6\0\2\12\3\0"+
    "\1\12\17\0\13\12\1\233\12\12\6\0\2\12\3\0"+
    "\1\12\17\0\10\12\1\234\15\12\6\0\2\12\3\0"+
    "\1\12\17\0\11\12\1\235\14\12\6\0\2\12\3\0"+
    "\1\12\17\0\12\12\1\236\13\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\10\1\14\11\14\1\1\11\1\1\1\11"+
    "\4\1\1\11\1\1\2\11\1\0\2\1\2\0\16\1"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\17\1\1\0"+
    "\1\11\1\1\1\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    protected final Stack<State> myStateStack = new Stack<State>();
    protected int myLeftBraceCount;

    private void pushState(int state) {
        myStateStack.push(new State(yystate(), myLeftBraceCount));
        myLeftBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = myStateStack.pop();
        myLeftBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

  public GraphQLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GraphQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      myLeftBraceCount = 0;
  myStateStack.clear();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 49: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 50: break;
          case 3: 
            { return EOL_COMMENT;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return NAME;
            } 
            // fall through
          case 52: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 53: break;
          case 6: 
            { pushState(VARIABLE_OR_TEMPLATE); return DOLLAR;
            } 
            // fall through
          case 54: break;
          case 7: 
            { pushState(QUOTED_STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 55: break;
          case 8: 
            { return BANG;
            } 
            // fall through
          case 56: break;
          case 9: 
            { return PAREN_L;
            } 
            // fall through
          case 57: break;
          case 10: 
            { return PAREN_R;
            } 
            // fall through
          case 58: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 59: break;
          case 12: 
            { return EQUALS;
            } 
            // fall through
          case 60: break;
          case 13: 
            { return AT;
            } 
            // fall through
          case 61: break;
          case 14: 
            { return BRACKET_L;
            } 
            // fall through
          case 62: break;
          case 15: 
            { return BRACKET_R;
            } 
            // fall through
          case 63: break;
          case 16: 
            { return BRACE_L;
            } 
            // fall through
          case 64: break;
          case 17: 
            { return PIPE;
            } 
            // fall through
          case 65: break;
          case 18: 
            { return BRACE_R;
            } 
            // fall through
          case 66: break;
          case 19: 
            { return AMP;
            } 
            // fall through
          case 67: break;
          case 20: 
            { return REGULAR_STRING_PART;
            } 
            // fall through
          case 68: break;
          case 21: 
            { popState(); return BAD_CHARACTER;
            } 
            // fall through
          case 69: break;
          case 22: 
            { popState(); return CLOSING_QUOTE;
            } 
            // fall through
          case 70: break;
          case 23: 
            { popState(); return NAME;
            } 
            // fall through
          case 71: break;
          case 24: 
            { pushState(TEMPLATE); return BRACE_L;
            } 
            // fall through
          case 72: break;
          case 25: 
            { return TEMPLATE_CHAR;
            } 
            // fall through
          case 73: break;
          case 26: 
            { myLeftBraceCount++; return TEMPLATE_CHAR;
            } 
            // fall through
          case 74: break;
          case 27: 
            { if (myLeftBraceCount == 0) { popState(); popState(); return BRACE_R; } myLeftBraceCount--; return TEMPLATE_CHAR;
            } 
            // fall through
          case 75: break;
          case 28: 
            { return VARIABLE_NAME;
            } 
            // fall through
          case 76: break;
          case 29: 
            { return ON_KEYWORD;
            } 
            // fall through
          case 77: break;
          case 30: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return REGULAR_STRING_PART;
            } 
            // fall through
          case 78: break;
          case 31: 
            { return SPREAD;
            } 
            // fall through
          case 79: break;
          case 32: 
            { pushState(BLOCK_STRING);  return OPEN_TRIPLE_QUOTE;
            } 
            // fall through
          case 80: break;
          case 33: 
            { popState(); return CLOSING_TRIPLE_QUOTE;
            } 
            // fall through
          case 81: break;
          case 34: 
            { return ENUM_KEYWORD;
            } 
            // fall through
          case 82: break;
          case 35: 
            { return TYPE_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 36: 
            { return QUERY_KEYWORD;
            } 
            // fall through
          case 84: break;
          case 37: 
            { return UNION_KEYWORD;
            } 
            // fall through
          case 85: break;
          case 38: 
            { return INPUT_KEYWORD;
            } 
            // fall through
          case 86: break;
          case 39: 
            { return EXTEND_KEYWORD;
            } 
            // fall through
          case 87: break;
          case 40: 
            { return SCALAR_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 41: 
            { return SCHEMA_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 42: 
            { return MUTATION_KEYWORD;
            } 
            // fall through
          case 90: break;
          case 43: 
            { return FRAGMENT_KEYWORD;
            } 
            // fall through
          case 91: break;
          case 44: 
            { return INTERFACE_KEYWORD;
            } 
            // fall through
          case 92: break;
          case 45: 
            { return DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 46: 
            { return REPEATABLE_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 47: 
            { return IMPLEMENTS_KEYWORD;
            } 
            // fall through
          case 95: break;
          case 48: 
            { return SUBSCRIPTION_KEYWORD;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
