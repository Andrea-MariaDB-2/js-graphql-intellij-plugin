plugins {
    id "org.jetbrains.grammarkit" version "2020.2.1"
    id 'org.jetbrains.intellij' version '0.4.21'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

group 'com.intellij.lang.jsgraphql'
version '2.5.0'

apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile ("com.graphql-java:graphql-java:15.0") {
        exclude group: "org.reactivestreams", module: "reactive-streams"
        exclude group: "com.graphql-java", module: "java-dataloader"
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile "commons-io:commons-io:2.6"
    compile "com.atlassian.commonmark:commonmark:0.12.1"
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.21'
    compile 'fr.opensagres.js:minimatch.java:1.1.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

intellij {
    version 'IU-LATEST-EAP-SNAPSHOT'
    type 'IU'
    updateSinceUntilBuild = false
    pluginName 'JS GraphQL'
    plugins = ['JavaScriptLanguage', 'CSS', 'IntelliLang', 'java']
    ideaDependencyCachePath = project.buildDir
}

runIde {
    jvmArgs '-Xmx2G'
}

buildSearchableOptions {
    // workaround for https://youtrack.jetbrains.com/issue/JBR-1550
    jbrVersion = '11_0_2b159'
}

patchPluginXml {

}

sourceSets {

    main.java.srcDirs = ['src/main', 'gen']
    main.resources.srcDir 'resources'

    test.java.srcDirs = ['src/test']
    test.resources.srcDir 'test-resources'

}

apply plugin: 'org.jetbrains.grammarkit'

// import is optional to make task creation easier
import org.jetbrains.grammarkit.tasks.*

// GraphQL Parser and Lexer
task generateGraphQLLexer(type: GenerateLexer) {
    source 'src/grammars/GraphQLLexer.flex'
    targetDir 'gen/com/intellij/lang/jsgraphql/'
    targetClass 'GraphQLLexer'
    purgeOldFiles = true
}

task generateGraphQLParser(type: GenerateParser) {
    source "src/grammars/GraphQLParser.bnf"
    targetRoot = 'gen/'
    purgeOldFiles = true
    pathToParser = 'com/intellij/lang/jsgraphql/GraphQLParser'
    pathToPsiRoot = 'com/intellij/lang/jsgraphql/psi'
}

// GraphQL Endpoint Parser and Lexer
task generateGraphQLEndpointLexer(type: GenerateLexer) {
    source 'src/grammars/JSGraphQLEndpointLexer.flex'
    targetDir 'gen/com/intellij/lang/jsgraphql/endpoint/lexer/'
    targetClass 'JSGraphQLEndpointLexer'
    purgeOldFiles = true
}

task generateGraphQLEndpointParser(type: GenerateParser) {
    source "src/grammars/JSGraphQLEndpointParser.bnf"
    targetRoot = 'gen/'
    purgeOldFiles = true
    pathToParser = 'com/intellij/lang/jsgraphql/endpoint/parser/JSGraphQLEndpointParser'
    pathToPsiRoot = 'com/intellij/lang/jsgraphql/endpoint/psi'
}


// GraphQL Endpoint Doc Parser and Lexer
task generateGraphQLEndpointDocLexer(type: GenerateLexer) {
    source 'src/grammars/JSGraphQLEndpointDocLexer.flex'
    targetDir 'gen/com/intellij/lang/jsgraphql/endpoint/doc/lexer/'
    targetClass 'GraphQLLexer'
    purgeOldFiles = true
}

task generateGraphQLEndpointDocParser(type: GenerateParser) {
    source "src/grammars/JSGraphQLEndpointDocParser.bnf"
    targetRoot = 'gen/'
    purgeOldFiles = true
    pathToParser = 'com/intellij/lang/jsgraphql/endpoint/doc/JSGraphQLEndpointDocParser'
    pathToPsiRoot = 'com/intellij/lang/jsgraphql/endpoint/doc/psi'
}

compileJava {
    dependsOn generateGraphQLEndpointLexer
    dependsOn generateGraphQLEndpointParser
    dependsOn generateGraphQLEndpointDocLexer
    dependsOn generateGraphQLEndpointDocParser
    dependsOn generateGraphQLLexer
    dependsOn generateGraphQLParser
}

compileJava.options.encoding = 'UTF-8'
