import <error descr="Cannot resolve file \"unknown\"">"unknown"</error>

import <error descr="\"importable\" is imported more than once">"importable"</error>
import <error descr="\"importable\" is imported more than once">"importable"</error>

type <error descr="'MainType' is redeclared in 'main.graphqle', 'ErrorAnnotator.graphqle'">MainType</error> {

}

type <error descr="'ImportableType' is redeclared in 'ErrorAnnotator.graphqle', 'importable.graphqle'">ImportableType</error> {

}

type <error descr="'NotInterface' is redeclared in 'ErrorAnnotator.graphqle'">NotInterface</error> {

}

type <error descr="'NotInterface' is redeclared in 'ErrorAnnotator.graphqle'">NotInterface</error> {

}

input MyInput {

}

interface Node {
    id: ID!
}

type Test implements Node, <error descr="'NotInterface' must be an interface to be used here">NotInterface</error>, <error descr="Unknown type 'UnknownType'. Are you missing an import?">UnknownType</error> {

    <error descr="Field signature doesn't match the field it overrides in interface 'Node'">id: ID</error>

    inputAsReturnType: <error descr="Field return type 'MyInput' cannot be an input type">MyInput</error>

    @DataFetcher(batched = <error descr="True or false expected">"test"</error>, value = <error descr="String value expected">true</error>, <error descr="Unknown argument 'another'">another</error> = 10)
    <error descr="Unknown annotation '@Unknown'.">@Unknown</error>("")
    wrongAnnotations: String

    wrongArgumentType(bar: [<error descr="Argument type 'Test' must be one of the following: 'input', 'enum', 'scalar'">Test</error>]!, bas: String): Test

    unknownReturnType: <error descr="Unknown type 'UnknownType'. Are you missing an import?">UnknownType</error>

    unknownArgumentType(foo: <error descr="Unknown type 'UnknownType'. Are you missing an import?">UnknownType</error>): String

    <error descr="Field 'duplicate' is declared more than once">duplicate</error>: String
    <error descr="Field 'duplicate' is declared more than once">duplicate</error>: String

}

input SomeInput {
    foo: <error descr="Input type must be declared before use">DeclaredAfterInput</error>
}

input DeclaredAfterInput {
    bar: String
}
